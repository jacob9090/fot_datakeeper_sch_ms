// student_chart.js

Dashmix.onLoad((() => class {
  static initChartsChartJS() {
    Chart.defaults.color = "#818d96";
    Chart.defaults.scale.grid.color = "rgba(0,0,0,.04)";
    Chart.defaults.scale.grid.zeroLineColor = "rgba(0,0,0,.1)";
    Chart.defaults.scale.beginAtZero = true;
    Chart.defaults.elements.line.borderWidth = 2;
    Chart.defaults.elements.point.radius = 5;
    Chart.defaults.elements.point.hoverRadius = 7;
    Chart.defaults.plugins.tooltip.radius = 3;
    Chart.defaults.plugins.legend.labels.boxWidth = 12;

    let barChartEl = document.getElementById("js-chartjs-bars");
    let donutChartEl = document.getElementById("js-chartjs-donut");

    // Fetch data from the API
    fetch('get_student_data.php') 
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json(); 
      })
      .then(data => {
        // Process data for bar chart
        const classCounts = {};
        const classLabels = [];
        const classData = [];

        data.forEach(student => {
          classCounts[student.current_class] = (classCounts[student.current_class] || 0) + 1;
        });

        // Sort classes alphabetically
        const sortedClasses = Object.keys(classCounts).sort();

        sortedClasses.forEach(className => {
          classLabels.push(className);
          classData.push(classCounts[className]);
        });

        // Process data for donut chart
        const genderCounts = {};
        const genderLabels = [];
        const genderData = [];

        data.forEach(student => {
          genderCounts[student.gender] = (genderCounts[student.gender] || 0) + 1;
        });

        for (const gender in genderCounts) {
          genderLabels.push(gender);
          genderData.push(genderCounts[gender]);
        }

        // Create bar chart with gradient fill
        const barChartData = {
          labels: classLabels,
          datasets: [{
            label: "Total Students",
            fill: true,
            backgroundColor: classData.map(value => {
              if (value > 150) {
                return '#dc4242a1';
              } else if (value >= 140 && value <= 150) {
                return '#3c75c9a1';
              } else {
                return '#2fb73fa1';
              }
            }),
            borderColor: "rgba(6, 101, 208, 1)",
            pointBackgroundColor: "rgba(6, 101, 208, 1)",
            pointBorderColor: "#fff",
            pointHoverBackgroundColor: "#fff",
            pointHoverBorderColor: "rgba(6, 101, 208, 1)",
            data: classData
          }]
        };

        if (barChartEl) {
          new Chart(barChartEl, {
            type: "bar",
            data: barChartData
          });
        }

        // Create donut chart
        const donutChartData = {
          labels: genderLabels,
          datasets: [{
            data: genderData,
            backgroundColor: ["rgba(141, 196, 81, 1)", "rgba(255, 177, 25, 1)"], 
            hoverBackgroundColor: ["rgba(141, 196, 81, .5)", "rgba(255, 177, 25, .5)"]
          }]
        };

        if (donutChartEl) {
          new Chart(donutChartEl, {
            type: "doughnut",
            data: donutChartData
          });
        }
      })
      .catch(error => {
        console.error("Error fetching data:", error);
      });
  }

  static initRandomEasyPieChart() {
    document.querySelectorAll(".js-pie-randomize").forEach((a => {
      a.addEventListener("click", (t => {
        a.closest(".block").querySelectorAll(".pie-chart").forEach((a => {
          jQuery(a).data("easyPieChart").update(Math.floor(100 * Math.random() + 1))
        }))
      }))
    }))
  }

  static init() {
    this.initChartsChartJS();
    this.initRandomEasyPieChart();
  }
}.init()));